counts = {}


def make_key(cls, part: str):
    """

    Creates a Redis key by concatenating the model prefix and the given part. The model prefix is obtained from the class's meta attribute 'model_key_prefix'. If the attribute is not present, an empty string is used as the prefix. The prefix is stripped of any colons before concatenation with the part.

    """
    model_prefix = getattr(cls._meta, "model_key_prefix", "").strip(":")
    return f"{model_prefix}:{part}"


def get_id_creator(key: str):
    """
    Returns a class that can be used to create primary keys. The class has a single method 'create_pk' that returns a new primary key each time it is called. The primary keys are generated by incrementing a count associated with the given key. If the key is not present in the global dictionary 'counts', a new count is initialized to 0. The returned class can be instantiated to create objects that generate primary keys for a specific key.
    """
    global counts

    if key not in counts:
        counts[key] = 0

    class PrimaryKeyCreator:
        def create_pk(self, *args, **kwargs) -> str:
            """Create a new primary key"""
            global counts
            counts[key] += 1
            return str(counts[key])

    return PrimaryKeyCreator


def get_meta(key: str):
    """
    Returns a class that can be used as the meta attribute for a model. The class has three attributes: 'model_key_prefix', 'index_name', and 'primary_key_creator_cls'. 'model_key_prefix' is set to the given key, 'index_name' is set to the concatenation of the key and the string ':index', and 'primary_key_creator_cls' is set to the class returned by calling 'get_id_creator' with the given key. The returned class can be used as the meta attribute for a model to configure its Redis key prefix, index name, and primary key creator.
    """

    class Meta:
        model_key_prefix = key
        index_name = f"{key}:index"
        primary_key_creator_cls = get_id_creator(key)

    return Meta


def Base(key: str):
    """
    Returns a base class that can be used as the parent class for models. The class has two methods: 'make_key' and 'get_meta'. 'make_key' is a class method that returns a Redis key by concatenating the model prefix and the given part. 'get_meta' is a class attribute that returns the meta class for the model, which is obtained by calling 'get_meta' with the given key. The returned base class can be used as the parent class for models to provide them with the 'make_key' method and the meta class.
    """

    class Base:
        @classmethod
        def make_key(cls, part: str):
            """
            This is a clas method that returns a Redis key by concatenating the model prefix and the given part. The model prefx is obtained from the class's meta attribute 'model_key_prefix'. If the attribute is not present, an empty string is used as the prefix. The prefix is stripped of any colons before concatenation with the part.
            """
            return make_key(cls, part)

        Meta = get_meta(key)

    return Base
